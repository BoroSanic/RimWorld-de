<?xml version="1.0" encoding="UTF-8"?>
<LanguageData>


	<Maneuver_Slash.rulePack.rulesStrings>
		<li>damaged_inf(p=4)->schlitzen</li>
		<li>damaged_inf->schneiden</li>
		<li>damaged_inf->spalten</li>
		<li>damaged_inf->hacken</li>
		<li>damaged_inf->schneiden</li>
		<li>damaged_inf(deflected!=True)->spalten</li>

		<li>damaged_past(p=4)->schlitzte</li>
		<li>damaged_past->schnitt</li>
		<li>damaged_past->spaltete</li>
		<li>damaged_past->hackte</li>
		<li>damaged_past->schnitt</li>
		<li>damaged_past(deflected!=True)->spaltete</li>

		<li>damaged_present->schlitzt</li>
		<li>damaged_present->schneidet</li>
		<li>damaged_present->spaltet</li>
		<li>damaged_present(deflected!=True)->hackt</li>
		<li>damaged_present(deflected!=True)->schneidet</li>
		<li>damaged_present(deflected!=True)->spaltet</li>

		<li>woundname->Wunde</li>
		<li>woundname(p=0.3)->Öffnung</li>
		<li>flavortext_situation(recipient_flesh!=Mechanoid)->mit einer blutenden [woundname]</li>
		<li>flavortext_situation->wobei Flüssigkeiten aus der [woundname] tropfen</li>
		<li>flavortext_consequence(recipient_flesh!=Mechanoid)->und legt das darunterliegende Fleisch frei</li>
		<li>flavortext_consequence(recipient_flesh==Mechanoid)->und legt die interne Maschinerie frei</li>
		<li>flavortext_consequence(recipient_flesh!=Mechanoid)->wobei eine riesige [woundname] zurückbleibt</li>

		<li>destroyed_past->halbierte</li>
		<li>destroyed_past->geteilte</li>
		<li>destroyed_past->halbierte</li>
		<li>destroyed_past->trennte</li>
		<li>destroyed_past->öffnete</li>

		<li>destroyed_present->halbiert</li>
		<li>destroyed_present->teilt</li>
		<li>destroyed_present->halbiert</li>
		<li>destroyed_present->trennt</li>
		<li>destroyed_present->öffnet</li>

		<li>destroyed_suffix->in saubere Stücke</li>
		<li>destroyed_suffix->sauber</li>
		<li>destroyed_suffix(target_part_destroyed_count==1)->legte das Innenleben frei</li>
		<li>destroyed_suffix(target_part_destroyed_count==1)->zerschnitten</li>
	</Maneuver_Slash.rulePack.rulesStrings>



	<Maneuver_Stab.rulePack.rulesStrings>
		<li>damaged_inf(p=4)->stechen</li>
		<li>damaged_inf->stoßen</li>
		<li>damaged_inf(deflected!=True)->durchbohren</li>
		<li>damaged_inf(deflected!=True)->durchstechen</li>
		<li>damaged_inf(deflected!=True)->durchdringen</li>

		<li>damaged_past(p=4)->stach</li>
		<li>damaged_past->stieß</li>
		<li>damaged_past(deflected!=True)->durchbohrte</li>
		<li>damaged_past(deflected!=True)->durchstach</li>
		<li>damaged_past(deflected!=True)->durchdrang</li>

		<li>damaged_present(deflected!=True)->durchsticht</li>
		<li>damaged_present(deflected!=True)->durchbohrt</li>
		<li>damaged_present(deflected!=True)->durchdringt</li>
		<li>damaged_present(deflected!=True)->spießt auf</li>

		<li>woundname->Öffnung</li>
		<li>woundname->Wunde</li>
		<li>woundname->Spalte</li>
		<li>flavortext_consequence(recipient_flesh!=Mechanoid)->hinterlässt eine blutige [woundname]</li>
		<li>flavortext_consequence(recipient_flesh!=Mechanoid)->hinterlässt eine zerrissene [woundname]</li>
		<li>flavortext_consequence(recipient_flesh!=Mechanoid)->hinterlässt eine blutende [woundname]</li>

		<li>destroyed_past->aufgespießt</li>
		<li>destroyed_past->durchlöchert</li>
		<li>destroyed_past->durchbohrt</li>

		<li>destroyed_present->aufspießen</li>
		<li>destroyed_present->durchlöchern</li>
		<li>destroyed_present->durchbohren</li>

		<li>destroyed_suffix->direkt durch</li>
		<li>destroyed_suffix->hinterlässt ein sauberes Loch</li>
		<li>destroyed_suffix(recipient_flesh!=Mechanoid,target_part_destroyed_count==1)->hinterlässt es mit austretenden Flüssigkeiten</li>
		<li>destroyed_suffix(target_part_destroyed_count==1)->hinterlässt es mit austretenden unidentifizierbaren Flüssigkeiten</li>
	</Maneuver_Stab.rulePack.rulesStrings>



	<Maneuver_Smash_Damage.rulePack.rulesStrings>
		<li>damaged_inf(p=4)->schlagen</li>
		<li>damaged_inf->zertrümmern</li>
		<li>damaged_inf->verprügeln</li>
		<li>damaged_inf->zerquetschen</li>
		<li>damaged_inf->treffen</li>

		<li>damaged_past(p=4)->schlug</li>
		<li>damaged_past->zertrümmerte</li>
		<li>damaged_past->verprügelte</li>
		<li>damaged_past->zerquetschte</li>
		<li>damaged_past->traf</li>

		<li>damaged_present->schlägt</li>
		<li>damaged_present->zertrümmert</li>
		<li>damaged_present->verprügelt</li>
		<li>damaged_present(deflected!=True)->zerquetscht</li>
		<li>damaged_present(deflected!=True)->zerfetzt</li>

		<li>destroyed_past->zerbrach</li>
		<li>destroyed_past->zerquetschte</li>
		<li>destroyed_past->vernichtete</li>
		<li>destroyed_past->vernichtete</li>
		<li>destroyed_past->brach</li>

		<li>destroyed_present->zerbricht</li>
		<li>destroyed_present->zerquetscht</li>
		<li>destroyed_present->vernichtet</li>
		<li>destroyed_present->vernichtet</li>
		<li>destroyed_present->bricht</li>
	</Maneuver_Smash_Damage.rulePack.rulesStrings>



	<Maneuver_Smash.rulePack.rulesStrings>
		<li>flavortext_consequence(recipient_flesh!=Mechanoid)->hinterlässt eine riesige Prellung</li>
		<li>flavortext_consequence->hinterlässt den Bereich sichtlich deformiert</li>
		<li>flavortext_consequence->und warf [RECIPIENT_objective] aus dem Gleichgewicht</li>
		<li>flavortext_consequence->und schlug [RECIPIENT_objective] zur Seite</li>

		<li>destroyed_suffix->[to] Stücke</li>
		<li>destroyed_suffix->[to] kleine Teile</li>
		<li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] einen feinen Staub</li>
		<li>destroyed_suffix->[to] Fragmente</li>
	</Maneuver_Smash.rulePack.rulesStrings>



	<Maneuver_Scratch_Damage.rulePack.rulesStrings>
		<li>damaged_inf(p=4)->kratzen</li>
		<li>damaged_inf(deflected!=True)->zerreißen</li>
		<li>damaged_inf(deflected!=True)->aufreißen</li>
		<li>damaged_inf->schneiden</li>

		<li>damaged_past(p=4)->kratzte</li>
		<li>damaged_past(deflected!=True)->zerriß</li>
		<li>damaged_past(deflected!=True)->riß</li>
		<li>damaged_past->schnitt</li>

		<li>damaged_present->kratzt</li>
		<li>damaged_present(deflected!=True)->zerreißt</li>
		<li>damaged_present(deflected!=True)->reißt</li>
		<li>damaged_present->schneidet</li>

		<li>destroyed_past->zerfleischt</li>
		<li>destroyed_past->zerrissen</li>
		<li>destroyed_past->zerfetzt</li>
		<li>destroyed_past->zerfetzt</li>
		<li>destroyed_past->zerrissen</li>

		<li>destroyed_present->zerfleischt</li>
		<li>destroyed_present->zerreißt</li>
		<li>destroyed_present->zerfetzt</li>
		<li>destroyed_present->zerfetzt</li>
		<li>destroyed_present->zerreißt</li>
	</Maneuver_Scratch_Damage.rulePack.rulesStrings>



	<Maneuver_Scratch.rulePack.rulesStrings>
		<li>woundname->Wunde</li>
		<li>woundname(p=0.3)->Öffnung</li>

		<li>flavortext_situation(recipient_flesh!=Mechanoid)->mit einer blutenden [woundname]</li>
		<li>flavortext_situation->mit aus der [woundname] tropfender Flüssigkeit</li>
		<li>flavortext_consequence(recipient_flesh!=Mechanoid)->und legt das darunterliegende Fleisch frei</li>
		<li>flavortext_consequence(recipient_flesh==Mechanoid)->und legt die darunterliegende Maschinerie frei</li>
		<li>flavortext_consequence(recipient_flesh!=Mechanoid)->und hinterlässt eine blutende [woundname]</li>

		<li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] blutige Streifen</li>
		<li>destroyed_suffix->[to] Streifen</li>
		<li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] blutige Stücke</li>
		<li>destroyed_suffix->[to] Stücke</li>
		<li>destroyed_suffix->[to] Fragmente</li>
		<li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] ein Haufen Innereien</li>
	</Maneuver_Scratch.rulePack.rulesStrings>



	<Maneuver_Poke.rulePack.rulesStrings>
		<li>damaged_inf(p=2)->stoßen</li>
		<li>damaged_inf(p=2)->stechen</li>
		<li>damaged_inf->stoßen</li>
		<li>damaged_inf->schieben</li>
		<li>damaged_inf->stechen</li>

		<li>damaged_past(p=2)->stieß</li>
		<li>damaged_past(p=2)->stach</li>
		<li>damaged_past->stieß</li>
		<li>damaged_past->schob</li>
		<li>damaged_past->stach</li>

		<li>damaged_present(p=2)->stößt</li>
		<li>damaged_present(p=2)->sticht</li>
		<li>damaged_present->sticht</li>
		<li>damaged_present->schiebt</li>
		<li>damaged_present->sticht</li>
		<li>flavortext_consequence(recipient_flesh!=Mechanoid)->hinterlässt eine riesige Prellung</li>
		<li>flavortext_consequence->hinterlässt den Bereich sichtlich deformiert</li>
		<li>flavortext_consequence->und warf [RECIPIENT_objective] aus dem Gleichgewicht</li>
		<li>flavortext_consequence->und schlug [RECIPIENT_objective] zur Seite</li>

		<li>destroyed_past->zerbrach</li>
		<li>destroyed_past->zerquetschte</li>
		<li>destroyed_past->vernichtete</li>
		<li>destroyed_past->vernichtete</li>
		<li>destroyed_past->brach</li>

		<li>destroyed_present->zerbricht</li>
		<li>destroyed_present->zerquetscht</li>
		<li>destroyed_present->vernichtet</li>
		<li>destroyed_present->vernichtet</li>
		<li>destroyed_present->bricht</li>

		<li>destroyed_suffix->[to] Stücke</li>
		<li>destroyed_suffix->[to] kleine Teile</li>
		<li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] einen feinen Staub</li>
		<li>destroyed_suffix->[to] Fragmente</li>
	</Maneuver_Poke.rulePack.rulesStrings>



	<Maneuver_Bite.rulePack.rulesStrings>
		<li>damaged_inf->beißen</li>
		<li>damaged_inf->kauen</li>
		<li>damaged_inf(p=0.5)->zwicken</li>

		<li>damaged_past->biß</li>
		<li>damaged_past->kaute</li>
		<li>damaged_past->zwickte</li>
		<li>damaged_past->nagte</li>
		<li>damaged_past(deflected!=True)->riß</li>

		<li>damaged_present->beißt</li>
		<li>damaged_present->kaut</li>
		<li>damaged_present->zwickt</li>
		<li>damaged_present->nagt</li>
		<li>damaged_present(deflected!=True)->reißen</li>

		<li>flavortext_consequence(recipient_flesh!=Mechanoid)->und legt das darunterliegende Fleisch frei</li>
		<li>flavortext_consequence(recipient_flesh==Mechanoid)->und legt die darunterliegende Maschinerie frei</li>
		<li>flavortext_consequence(recipient_flesh!=Mechanoid)->und hinterlässt grausame Risse in der Haut</li>
		<li>flavortext_consequence(recipient_flesh==Mechanoid)->und hinterlässt grausame Risse im Metall</li>

		<li>destroyed_past->verschlang</li>
		<li>destroyed_past->trennt</li>
		<li>destroyed_past->reißt</li>
		<li>destroyed_past->verwüstet</li>

		<li>destroyed_present->verschlingt</li>
		<li>destroyed_present->trennte</li>
		<li>destroyed_present->riß</li>
		<li>destroyed_present->verwüstete</li>

		<li>destroyed_suffix->[to] Fetzen</li>
		<!-- How's his wife holding up? -->
		<li>destroyed_suffix->[to] Stücke</li>
		<li>destroyed_suffix->[to] Streifen</li>
		<li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] blutige Streifen</li>
		<li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] eine unkenntliche Masse</li>
	</Maneuver_Bite.rulePack.rulesStrings>



	<Maneuver_KickMaterialInEyes_MeleeHit.rulePack.rulesStrings>
		<li>r_logentry->[INITIATOR_definite] warf [TOOL_label] in [RECIPIENT_definite]'s Augen.</li>
		<li>r_logentry(p=0.2)->[INITIATOR_definite] warf eine Ladung [TOOL_label] in [RECIPIENT_definite]'s Augen.</li>
	</Maneuver_KickMaterialInEyes_MeleeHit.rulePack.rulesStrings>



	<Maneuver_KickMaterialInEyes_MeleeMiss.rulePack.rulesStrings>
		<li>r_logentry->[INITIATOR_definite] versuchte [TOOL_label] in [RECIPIENT_definite]'s Augen zu werfen, aber verfehlte.</li>
	</Maneuver_KickMaterialInEyes_MeleeMiss.rulePack.rulesStrings>



	<Maneuver_KickMaterialInEyes_MeleeDodge.rulePack.rulesStrings>
		<li>r_logentry->[INITIATOR_definite] versuchte [TOOL_label] in [RECIPIENT_definite]'s Augen zu werfen, aber [RECIPIENT_definite] sprang aus dem Weg.</li>
		<li>r_logentry->[INITIATOR_definite] versuchte [TOOL_label] in [RECIPIENT_definite]'s Augen zu werfen, aber [RECIPIENT_definite] blockte es.</li>
	</Maneuver_KickMaterialInEyes_MeleeDodge.rulePack.rulesStrings>



</LanguageData>
